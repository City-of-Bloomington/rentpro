package rental.utils;
import java.io.*;
import java.util.List;
import java.util.ArrayList;
import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import java.net.URL;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.security.KeyStore;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import rental.list.*;
import rental.model.*;

public class HandleAddress extends DefaultHandler{

    final static long serialVersionUID = 340L;	
    static String stUrl = "";

    boolean outFlag = false; // true will print the input
    private Writer out = null;
    String lineEnd = null;
    List<Address> all = null;
    Address address = null;
    Subunit subunit = null;
    String currElem = "";
    static Logger logger = LogManager.getLogger(HandleAddress.class);
	
    public HandleAddress(String strUrl, boolean debug){

	super();
	outFlag = debug;
	//
        // Use an instance of ourselves as the SAX event handler
	//
	DefaultHandler handler = this;
	// Use the default (non-validating) parser
	SAXParserFactory factory = SAXParserFactory.newInstance();
	//
	//factory.setValidating(true); // to add validation you need dtd
	//
	DefaultHttpClient httpclient = new DefaultHttpClient();		
	try {
	    //
	    HttpGet httpget = new HttpGet(strUrl);
            // System.out.println("executing request" + httpget.getRequestLine());
            HttpResponse response = httpclient.execute(httpget);
            HttpEntity entity = response.getEntity();
	    InputStream ret = entity.getContent();
	    /*
	      InputStreamReader reader = new InputStreamReader(entity.getContent());
	      BufferedReader ret = new BufferedReader(reader);
	    */
	    //
	    // Set up output stream
	    //
	    out = new OutputStreamWriter(System.out, "UTF8");
	    lineEnd =  System.getProperty("line.separator");
	    //
	    // Parse the input
	    //
	    SAXParser saxParser = factory.newSAXParser();
	    saxParser.parse(ret, handler);

	} catch (SAXParseException spe) {
	    // Error generated by the parser
	    System.out.println("\n** Parsing error" 
			       + ", line " + spe.getLineNumber()
			       + ", uri " + spe.getSystemId());
	    System.out.println("   " + spe.getMessage() );

	} catch (Exception ex) {
	    logger.error("Rental: "+ex);
	}
	finally{
            httpclient.getConnectionManager().shutdown();
	}
    }
    //
    public List<Address> getAddresses(){
	return all;
    }
    //
    public InputStream readUrl(String strUrl) throws Exception {
		
	URL url = new URL(strUrl);
        InputStream is = url.openStream();
        return is;
    }
    //
    //
    //===========================================================
    // SAX DocumentHandler methods
    //===========================================================
    //
    public void startDocument() throws SAXException{

        emit("<?xml version='1.0' encoding='UTF-8'?>");
        nl();
	all = new ArrayList<Address>(5);
    }
    //
    public void endDocument() throws SAXException {
        try {
            nl();
            out.flush();
        } catch (IOException e) {
	    logger.error(e);			
            throw new SAXException("I/O error", e);
        }
    }
    //
    public void startElement(String namespaceURI,
                             String lName, // local name
                             String qName, // qualified name
                             Attributes attrs)
	throws SAXException{
	try{
	    String eName = lName; // element name
	    if ("".equals(eName)) eName = qName; 
	    currElem = qName;
	    if(qName.equals("address"))
		address = new Address();
	    else if(qName.equals("subunit"))
		subunit = new Subunit();
	    emit("<"+eName);
	    if (attrs != null) {
		for (int i = 0; i < attrs.getLength(); i++) {
		    String aName = attrs.getLocalName(i); // Attr name 
		    if ("".equals(aName)) aName = attrs.getQName(i);
		    emit(" ");
		    emit(aName+"=\""+attrs.getValue(i)+"\"");
		    // purpose items have id's
		    if(aName.indexOf("id") > -1 && subunit != null){
			try{
			    subunit.setId(attrs.getValue(i));
			}catch(Exception ex){
			    logger.error(""+ex);
			}
		    }
		}
	    }
	    emit(">");
	}catch(Exception ex){
	    logger.error(ex);
	}
    }
    //
    public void endElement(String namespaceURI,
                           String sName, // simple name
                           String qName  // qualified name
			   ) throws SAXException {
        emit("</"+qName+">");
	if(qName.equals("subunit")){
	    if(address != null)
		address.addSubunit(subunit);
	}
	else if(qName.equals("address")){
	    if(all != null && address != null)
		all.add(address);
	}
    }
    //
    public void characters(char buf[], int offset, int len)
	throws SAXException{
	try{
	    String s = new String(buf, offset, len);
	    emit(s);
	    s = s.trim();
	    if(!s.equals("")){
		if(currElem.equals("id"))
		    address.setStreet_address_id(s);// id master address
		else if(currElem.equals("streetAddress"))
		    address.setStreetAddress(s);			
		else if(currElem.equals("state"))
		    address.setState(s);
		else if(currElem.equals("city"))
		    address.setCity(s);
		else if(currElem.equals("zip"))
		    address.setZip(s);			
		else if(currElem.startsWith("lat"))
		    address.setLat(s);
		else if(currElem.startsWith("longi"))
		    address.setLng(s);
		else if(currElem.startsWith("type")){
		    if(subunit != null){
			subunit.setType(s);
		    }
		    else{
			address.setStreet_type(s);
		    }
		}
		else if(currElem.startsWith("identifier"))
		    subunit.setIdentifier(s);
	    }
	}catch(Exception ex){
	    logger.error(ex);
	}
    }
    //
    //===========================================================
    // Utility Methods ...
    //===========================================================
    //
    // Wrap I/O exceptions in SAX exceptions, to
    // suit handler signature requirements
    //
    private void emit(String s) throws SAXException{

        try {
	    if(outFlag){
		out.write(s);
		out.flush();
	    }
	} catch (IOException e) {
	    logger.error(e);			
	    throw new SAXException("I/O error", e);
	}
    }
    // Start a new line
    private void nl() throws SAXException{

        try {
	    if(outFlag){
		out.write(lineEnd);
	    }
        } catch (IOException e) {
	    logger.error(e);			
            throw new SAXException("I/O error", e);
        }
    }

}







































